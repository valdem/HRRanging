# -*- coding: utf-8 -*-
"""ЯКомпания.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nLyls6EVote3wkxLVsVqsKcTONVClHzj
"""

import json
import pandas as pd
from sentence_transformers import SentenceTransformer

# Подключение к диску
#from google.colab import drive
#drive.mount('/content/gdrive')

# открываем нужные коллекции
jobs_file = 'jsons/jobs.json'
offers_file = 'jsons/offers.json'
specialists_file = 'jsons/specialists.json'
skills_file = 'jsons/skills.json'
offerstatuses_file = 'jsons/offerstatuses.json'

with open(jobs_file, encoding='utf-8') as train_file:
    dict_jobs = json.load(train_file)
with open(offers_file, encoding='utf-8') as train_file:
    dict_offers = json.load(train_file)
with open(specialists_file, encoding='utf-8') as train_file:
    dict_specs = json.load(train_file)
with open(skills_file, encoding='utf-8') as train_file:
    dict_skills = json.load(train_file)
with open(offerstatuses_file, encoding='utf-8') as train_file:
    dict_offstatuses = json.load(train_file)

# делаем датафреймы из коллекций json
df_offers = pd.json_normalize(dict_offers)
df_specs = pd.json_normalize(dict_specs)
df_skills = pd.json_normalize(dict_skills)
df_offstatuses = pd.json_normalize(dict_offstatuses)

# составляем список из расшифровок статусов по айдишнику
offstatuses = []
for status in df_offers['status.$oid']:
    statuses = df_offstatuses.loc[df_offstatuses['_id.$oid'] == status]
    offstatuses.append(statuses['name.ru'].iloc[0])

# составляем словарь (ключ - айдишник вакансии, значение - требования)
job_reqs={}
for job in dict_jobs:
    job_req = ''
    for requirement in job['requirements']:
        job_req += requirement['requirement']['ru']
    job_reqs[job['_id']['$oid']] = job_req

# составляем список из требований по айдишнику вакансии
requierements = []
for job in df_offers['job.$oid']:
    requierements.append(job_reqs[job])

print(job_reqs)

# составляем список из скиллов специалиста
spec_skills = []
for skills in df_specs['skills']:
    tmp_skills = ''
    for skill in skills:
        tmp_skill = df_skills.loc[df_skills['_id.$oid'] == skill]
        tmp_skills += tmp_skill['name.ru'].iloc[0]
        tmp_skills += ';'
    spec_skills.append(tmp_skills)

df_specs['spec_skills'] = spec_skills

# составляем список из скиллов спеца по его айдишнику
skills = []
for spec in df_offers['specialist.$oid']:
    tmp_skills = df_specs.loc[df_specs['_id.$oid'] == spec]
    if tmp_skills.empty:
        skills.append(None)
    else:
        skills.append(tmp_skills['spec_skills'].iloc[0])

# добавляем расшифровки требований
df_offers = df_offers.drop('job.$oid', axis=1)
df_offers['requirements'] = requierements

# добавляем расшифровки статусов
df_offers = df_offers.drop('status.$oid', axis=1)
df_offers['status'] = offstatuses

# добавляем расшифровки скиллов
df_offers = df_offers.drop('specialist.$oid', axis=1)
df_offers['skills'] = skills

# удаляем ненужный столбец
df_offers = df_offers.drop('__v', axis=1)

df_offers.info()

# удаляем строки с пустыми значениями
df_offers.dropna(inplace = True)

# df_offers.head(10)

# подгружаем модель
model = SentenceTransformer("all-MiniLM-L6-v2")

# вычисление эмбедингов
req_embeddings = model.encode(df_offers['requirements'].to_list())
skill_embeddings = model.encode(df_offers['skills'].to_list())

# семантическое сравнение с помощью модели
similarities = model.similarity(req_embeddings, skill_embeddings)

for idx_i, req in enumerate(df_offers['requirements'].to_list()):
  #print(req)
  similarity = 0
  sim_skill = 'None'
  for idx_j, skill in enumerate(df_offers['skills'].to_list()):
    if similarities[idx_i][idx_j] > similarity:
      similarity = similarities[idx_i][idx_j]
      sim_skill = skill
  #print(f" - {sim_skill: <30}: {similarity:.4f}")

def find_specialist(requirement):
  model = SentenceTransformer("all-MiniLM-L6-v2")
  req_embeddings = model.encode(requirement)
  similarities = model.similarity(req_embeddings, skill_embeddings)
  similarity = 0
  sim_skill = 'None'
  for idx_i, skill in enumerate(df_offers['skills'].to_list()):
    if similarities[0][idx_i] > similarity:
      similarity = similarities[0][idx_i]
      sim_skill = skill
  found_spec = (f" - {sim_skill: <200}: {    similarity: .4f}")

  return found_spec
